// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: race.proto

package pcsscraper

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stage_ProfileType int32

const (
	Stage_PROFILE_TYPE_UNSPECIFIED             Stage_ProfileType = 0
	Stage_PROFILE_TYPE_FLAT                    Stage_ProfileType = 1
	Stage_PROFILE_TYPE_HILLS_FLAT_FINISH       Stage_ProfileType = 2
	Stage_PROFILE_TYPE_HILLS_UPHILL_FINISH     Stage_ProfileType = 3
	Stage_PROFILE_TYPE_MOUNTAINS_FLAT_FINISH   Stage_ProfileType = 4
	Stage_PROFILE_TYPE_MOUNTAINS_UPHILL_FINISH Stage_ProfileType = 5
)

// Enum value maps for Stage_ProfileType.
var (
	Stage_ProfileType_name = map[int32]string{
		0: "PROFILE_TYPE_UNSPECIFIED",
		1: "PROFILE_TYPE_FLAT",
		2: "PROFILE_TYPE_HILLS_FLAT_FINISH",
		3: "PROFILE_TYPE_HILLS_UPHILL_FINISH",
		4: "PROFILE_TYPE_MOUNTAINS_FLAT_FINISH",
		5: "PROFILE_TYPE_MOUNTAINS_UPHILL_FINISH",
	}
	Stage_ProfileType_value = map[string]int32{
		"PROFILE_TYPE_UNSPECIFIED":             0,
		"PROFILE_TYPE_FLAT":                    1,
		"PROFILE_TYPE_HILLS_FLAT_FINISH":       2,
		"PROFILE_TYPE_HILLS_UPHILL_FINISH":     3,
		"PROFILE_TYPE_MOUNTAINS_FLAT_FINISH":   4,
		"PROFILE_TYPE_MOUNTAINS_UPHILL_FINISH": 5,
	}
)

func (x Stage_ProfileType) Enum() *Stage_ProfileType {
	p := new(Stage_ProfileType)
	*p = x
	return p
}

func (x Stage_ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage_ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_race_proto_enumTypes[0].Descriptor()
}

func (Stage_ProfileType) Type() protoreflect.EnumType {
	return &file_race_proto_enumTypes[0]
}

func (x Stage_ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage_ProfileType.Descriptor instead.
func (Stage_ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{2, 0}
}

type Stage_StageType int32

const (
	Stage_STAGE_TYPE_UNSPECIFIED           Stage_StageType = 0
	Stage_STAGE_TYPE_REGULAR               Stage_StageType = 1
	Stage_STAGE_TYPE_INDIVIDUAL_TIME_TRIAL Stage_StageType = 2
	Stage_STAGE_TYPE_TEAM_TIME_TRIAL       Stage_StageType = 3
)

// Enum value maps for Stage_StageType.
var (
	Stage_StageType_name = map[int32]string{
		0: "STAGE_TYPE_UNSPECIFIED",
		1: "STAGE_TYPE_REGULAR",
		2: "STAGE_TYPE_INDIVIDUAL_TIME_TRIAL",
		3: "STAGE_TYPE_TEAM_TIME_TRIAL",
	}
	Stage_StageType_value = map[string]int32{
		"STAGE_TYPE_UNSPECIFIED":           0,
		"STAGE_TYPE_REGULAR":               1,
		"STAGE_TYPE_INDIVIDUAL_TIME_TRIAL": 2,
		"STAGE_TYPE_TEAM_TIME_TRIAL":       3,
	}
)

func (x Stage_StageType) Enum() *Stage_StageType {
	p := new(Stage_StageType)
	*p = x
	return p
}

func (x Stage_StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage_StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_race_proto_enumTypes[1].Descriptor()
}

func (Stage_StageType) Type() protoreflect.EnumType {
	return &file_race_proto_enumTypes[1]
}

func (x Stage_StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage_StageType.Descriptor instead.
func (Stage_StageType) EnumDescriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{2, 1}
}

type Races struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Races []*Race `protobuf:"bytes,1,rep,name=races,proto3" json:"races,omitempty"`
}

func (x *Races) Reset() {
	*x = Races{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Races) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Races) ProtoMessage() {}

func (x *Races) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Races.ProtoReflect.Descriptor instead.
func (*Races) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{0}
}

func (x *Races) GetRaces() []*Race {
	if x != nil {
		return x.Races
	}
	return nil
}

type Race struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country   string                 `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Stages    []*Stage               `protobuf:"bytes,6,rep,name=stages,proto3" json:"stages,omitempty"`
	Teams     []*TeamParticipation   `protobuf:"bytes,7,rep,name=teams,proto3" json:"teams,omitempty"`
	Website   *string                `protobuf:"bytes,8,opt,name=website,proto3,oneof" json:"website,omitempty"`
	Result    []*ParticipantResult   `protobuf:"bytes,9,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *Race) Reset() {
	*x = Race{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Race) ProtoMessage() {}

func (x *Race) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Race.ProtoReflect.Descriptor instead.
func (*Race) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{1}
}

func (x *Race) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Race) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Race) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Race) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Race) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Race) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Race) GetTeams() []*TeamParticipation {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Race) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

func (x *Race) GetResult() []*ParticipantResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	Distance      float32                `protobuf:"fixed32,3,opt,name=distance,proto3" json:"distance,omitempty"`
	Result        []*ParticipantResult   `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
	ProfileType   Stage_ProfileType      `protobuf:"varint,5,opt,name=profile_type,json=profileType,proto3,enum=io.github.patxibocos.pcsscraper.protobuf.Stage_ProfileType" json:"profile_type,omitempty"`
	Departure     *string                `protobuf:"bytes,6,opt,name=departure,proto3,oneof" json:"departure,omitempty"`
	Arrival       *string                `protobuf:"bytes,7,opt,name=arrival,proto3,oneof" json:"arrival,omitempty"`
	StageType     Stage_StageType        `protobuf:"varint,8,opt,name=stage_type,json=stageType,proto3,enum=io.github.patxibocos.pcsscraper.protobuf.Stage_StageType" json:"stage_type,omitempty"`
	GcResult      []*ParticipantResult   `protobuf:"bytes,9,rep,name=gcResult,proto3" json:"gcResult,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{2}
}

func (x *Stage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stage) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

func (x *Stage) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Stage) GetResult() []*ParticipantResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Stage) GetProfileType() Stage_ProfileType {
	if x != nil {
		return x.ProfileType
	}
	return Stage_PROFILE_TYPE_UNSPECIFIED
}

func (x *Stage) GetDeparture() string {
	if x != nil && x.Departure != nil {
		return *x.Departure
	}
	return ""
}

func (x *Stage) GetArrival() string {
	if x != nil && x.Arrival != nil {
		return *x.Arrival
	}
	return ""
}

func (x *Stage) GetStageType() Stage_StageType {
	if x != nil {
		return x.StageType
	}
	return Stage_STAGE_TYPE_UNSPECIFIED
}

func (x *Stage) GetGcResult() []*ParticipantResult {
	if x != nil {
		return x.GcResult
	}
	return nil
}

type TeamParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string                `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Riders []*RiderParticipation `protobuf:"bytes,2,rep,name=riders,proto3" json:"riders,omitempty"`
}

func (x *TeamParticipation) Reset() {
	*x = TeamParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamParticipation) ProtoMessage() {}

func (x *TeamParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamParticipation.ProtoReflect.Descriptor instead.
func (*TeamParticipation) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{3}
}

func (x *TeamParticipation) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamParticipation) GetRiders() []*RiderParticipation {
	if x != nil {
		return x.Riders
	}
	return nil
}

type ParticipantResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position      uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Time          int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ParticipantResult) Reset() {
	*x = ParticipantResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantResult) ProtoMessage() {}

func (x *ParticipantResult) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantResult.ProtoReflect.Descriptor instead.
func (*ParticipantResult) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{4}
}

func (x *ParticipantResult) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ParticipantResult) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *ParticipantResult) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RiderParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiderId string  `protobuf:"bytes,1,opt,name=rider_id,json=riderId,proto3" json:"rider_id,omitempty"`
	Number  *uint32 `protobuf:"varint,2,opt,name=number,proto3,oneof" json:"number,omitempty"`
}

func (x *RiderParticipation) Reset() {
	*x = RiderParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiderParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiderParticipation) ProtoMessage() {}

func (x *RiderParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiderParticipation.ProtoReflect.Descriptor instead.
func (*RiderParticipation) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{5}
}

func (x *RiderParticipation) GetRiderId() string {
	if x != nil {
		return x.RiderId
	}
	return ""
}

func (x *RiderParticipation) GetNumber() uint32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

var File_race_proto protoreflect.FileDescriptor

var file_race_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x69, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63,
	0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x05, 0x52, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x05, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78,
	0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52,
	0x05, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0xd2, 0x03, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78,
	0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70,
	0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f,
	0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0xa4, 0x07, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74,
	0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74,
	0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x67, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e,
	0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x67, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xde, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x55,
	0x50, 0x48, 0x49, 0x4c, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x12, 0x26,
	0x0a, 0x22, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53,
	0x5f, 0x55, 0x50, 0x48, 0x49, 0x4c, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x05,
	0x22, 0x85, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61,
	0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x69, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x22, 0x5a, 0x20,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x74, 0x78, 0x69,
	0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2f, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_race_proto_rawDescOnce sync.Once
	file_race_proto_rawDescData = file_race_proto_rawDesc
)

func file_race_proto_rawDescGZIP() []byte {
	file_race_proto_rawDescOnce.Do(func() {
		file_race_proto_rawDescData = protoimpl.X.CompressGZIP(file_race_proto_rawDescData)
	})
	return file_race_proto_rawDescData
}

var file_race_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_race_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_race_proto_goTypes = []interface{}{
	(Stage_ProfileType)(0),        // 0: io.github.patxibocos.pcsscraper.protobuf.Stage.ProfileType
	(Stage_StageType)(0),          // 1: io.github.patxibocos.pcsscraper.protobuf.Stage.StageType
	(*Races)(nil),                 // 2: io.github.patxibocos.pcsscraper.protobuf.Races
	(*Race)(nil),                  // 3: io.github.patxibocos.pcsscraper.protobuf.Race
	(*Stage)(nil),                 // 4: io.github.patxibocos.pcsscraper.protobuf.Stage
	(*TeamParticipation)(nil),     // 5: io.github.patxibocos.pcsscraper.protobuf.TeamParticipation
	(*ParticipantResult)(nil),     // 6: io.github.patxibocos.pcsscraper.protobuf.ParticipantResult
	(*RiderParticipation)(nil),    // 7: io.github.patxibocos.pcsscraper.protobuf.RiderParticipation
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_race_proto_depIdxs = []int32{
	3,  // 0: io.github.patxibocos.pcsscraper.protobuf.Races.races:type_name -> io.github.patxibocos.pcsscraper.protobuf.Race
	8,  // 1: io.github.patxibocos.pcsscraper.protobuf.Race.start_date:type_name -> google.protobuf.Timestamp
	8,  // 2: io.github.patxibocos.pcsscraper.protobuf.Race.end_date:type_name -> google.protobuf.Timestamp
	4,  // 3: io.github.patxibocos.pcsscraper.protobuf.Race.stages:type_name -> io.github.patxibocos.pcsscraper.protobuf.Stage
	5,  // 4: io.github.patxibocos.pcsscraper.protobuf.Race.teams:type_name -> io.github.patxibocos.pcsscraper.protobuf.TeamParticipation
	6,  // 5: io.github.patxibocos.pcsscraper.protobuf.Race.result:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResult
	8,  // 6: io.github.patxibocos.pcsscraper.protobuf.Stage.start_date_time:type_name -> google.protobuf.Timestamp
	6,  // 7: io.github.patxibocos.pcsscraper.protobuf.Stage.result:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResult
	0,  // 8: io.github.patxibocos.pcsscraper.protobuf.Stage.profile_type:type_name -> io.github.patxibocos.pcsscraper.protobuf.Stage.ProfileType
	1,  // 9: io.github.patxibocos.pcsscraper.protobuf.Stage.stage_type:type_name -> io.github.patxibocos.pcsscraper.protobuf.Stage.StageType
	6,  // 10: io.github.patxibocos.pcsscraper.protobuf.Stage.gcResult:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResult
	7,  // 11: io.github.patxibocos.pcsscraper.protobuf.TeamParticipation.riders:type_name -> io.github.patxibocos.pcsscraper.protobuf.RiderParticipation
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_race_proto_init() }
func file_race_proto_init() {
	if File_race_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_race_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Races); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Race); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiderParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_race_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_race_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_race_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_race_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_race_proto_goTypes,
		DependencyIndexes: file_race_proto_depIdxs,
		EnumInfos:         file_race_proto_enumTypes,
		MessageInfos:      file_race_proto_msgTypes,
	}.Build()
	File_race_proto = out.File
	file_race_proto_rawDesc = nil
	file_race_proto_goTypes = nil
	file_race_proto_depIdxs = nil
}
