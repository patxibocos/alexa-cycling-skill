// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v4.23.4
// source: race.proto

package pcsscraper

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Stage_ProfileType int32

const (
	Stage_PROFILE_TYPE_UNSPECIFIED             Stage_ProfileType = 0
	Stage_PROFILE_TYPE_FLAT                    Stage_ProfileType = 1
	Stage_PROFILE_TYPE_HILLS_FLAT_FINISH       Stage_ProfileType = 2
	Stage_PROFILE_TYPE_HILLS_UPHILL_FINISH     Stage_ProfileType = 3
	Stage_PROFILE_TYPE_MOUNTAINS_FLAT_FINISH   Stage_ProfileType = 4
	Stage_PROFILE_TYPE_MOUNTAINS_UPHILL_FINISH Stage_ProfileType = 5
)

// Enum value maps for Stage_ProfileType.
var (
	Stage_ProfileType_name = map[int32]string{
		0: "PROFILE_TYPE_UNSPECIFIED",
		1: "PROFILE_TYPE_FLAT",
		2: "PROFILE_TYPE_HILLS_FLAT_FINISH",
		3: "PROFILE_TYPE_HILLS_UPHILL_FINISH",
		4: "PROFILE_TYPE_MOUNTAINS_FLAT_FINISH",
		5: "PROFILE_TYPE_MOUNTAINS_UPHILL_FINISH",
	}
	Stage_ProfileType_value = map[string]int32{
		"PROFILE_TYPE_UNSPECIFIED":             0,
		"PROFILE_TYPE_FLAT":                    1,
		"PROFILE_TYPE_HILLS_FLAT_FINISH":       2,
		"PROFILE_TYPE_HILLS_UPHILL_FINISH":     3,
		"PROFILE_TYPE_MOUNTAINS_FLAT_FINISH":   4,
		"PROFILE_TYPE_MOUNTAINS_UPHILL_FINISH": 5,
	}
)

func (x Stage_ProfileType) Enum() *Stage_ProfileType {
	p := new(Stage_ProfileType)
	*p = x
	return p
}

func (x Stage_ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage_ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_race_proto_enumTypes[0].Descriptor()
}

func (Stage_ProfileType) Type() protoreflect.EnumType {
	return &file_race_proto_enumTypes[0]
}

func (x Stage_ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage_ProfileType.Descriptor instead.
func (Stage_ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{3, 0}
}

type Stage_StageType int32

const (
	Stage_STAGE_TYPE_UNSPECIFIED           Stage_StageType = 0
	Stage_STAGE_TYPE_REGULAR               Stage_StageType = 1
	Stage_STAGE_TYPE_INDIVIDUAL_TIME_TRIAL Stage_StageType = 2
	Stage_STAGE_TYPE_TEAM_TIME_TRIAL       Stage_StageType = 3
)

// Enum value maps for Stage_StageType.
var (
	Stage_StageType_name = map[int32]string{
		0: "STAGE_TYPE_UNSPECIFIED",
		1: "STAGE_TYPE_REGULAR",
		2: "STAGE_TYPE_INDIVIDUAL_TIME_TRIAL",
		3: "STAGE_TYPE_TEAM_TIME_TRIAL",
	}
	Stage_StageType_value = map[string]int32{
		"STAGE_TYPE_UNSPECIFIED":           0,
		"STAGE_TYPE_REGULAR":               1,
		"STAGE_TYPE_INDIVIDUAL_TIME_TRIAL": 2,
		"STAGE_TYPE_TEAM_TIME_TRIAL":       3,
	}
)

func (x Stage_StageType) Enum() *Stage_StageType {
	p := new(Stage_StageType)
	*p = x
	return p
}

func (x Stage_StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage_StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_race_proto_enumTypes[1].Descriptor()
}

func (Stage_StageType) Type() protoreflect.EnumType {
	return &file_race_proto_enumTypes[1]
}

func (x Stage_StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage_StageType.Descriptor instead.
func (Stage_StageType) EnumDescriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{3, 1}
}

type Race struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country string               `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Stages  []*Stage             `protobuf:"bytes,4,rep,name=stages,proto3" json:"stages,omitempty"`
	Teams   []*TeamParticipation `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty"`
	Website *string              `protobuf:"bytes,6,opt,name=website,proto3,oneof" json:"website,omitempty"`
}

func (x *Race) Reset() {
	*x = Race{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Race) ProtoMessage() {}

func (x *Race) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Race.ProtoReflect.Descriptor instead.
func (*Race) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{0}
}

func (x *Race) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Race) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Race) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Race) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Race) GetTeams() []*TeamParticipation {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Race) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

type TeamParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string                `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Riders []*RiderParticipation `protobuf:"bytes,2,rep,name=riders,proto3" json:"riders,omitempty"`
}

func (x *TeamParticipation) Reset() {
	*x = TeamParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamParticipation) ProtoMessage() {}

func (x *TeamParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamParticipation.ProtoReflect.Descriptor instead.
func (*TeamParticipation) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{1}
}

func (x *TeamParticipation) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamParticipation) GetRiders() []*RiderParticipation {
	if x != nil {
		return x.Riders
	}
	return nil
}

type RiderParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiderId string  `protobuf:"bytes,1,opt,name=rider_id,json=riderId,proto3" json:"rider_id,omitempty"`
	Number  *uint32 `protobuf:"varint,2,opt,name=number,proto3,oneof" json:"number,omitempty"`
}

func (x *RiderParticipation) Reset() {
	*x = RiderParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiderParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiderParticipation) ProtoMessage() {}

func (x *RiderParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiderParticipation.ProtoReflect.Descriptor instead.
func (*RiderParticipation) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{2}
}

func (x *RiderParticipation) GetRiderId() string {
	if x != nil {
		return x.RiderId
	}
	return ""
}

func (x *RiderParticipation) GetNumber() uint32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartDateTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	Distance       float32                `protobuf:"fixed32,3,opt,name=distance,proto3" json:"distance,omitempty"`
	ProfileType    Stage_ProfileType      `protobuf:"varint,4,opt,name=profile_type,json=profileType,proto3,enum=io.github.patxibocos.pcsscraper.protobuf.Stage_ProfileType" json:"profile_type,omitempty"`
	Departure      *string                `protobuf:"bytes,5,opt,name=departure,proto3,oneof" json:"departure,omitempty"`
	Arrival        *string                `protobuf:"bytes,6,opt,name=arrival,proto3,oneof" json:"arrival,omitempty"`
	StageType      Stage_StageType        `protobuf:"varint,7,opt,name=stage_type,json=stageType,proto3,enum=io.github.patxibocos.pcsscraper.protobuf.Stage_StageType" json:"stage_type,omitempty"`
	StageResults   *StageResults          `protobuf:"bytes,8,opt,name=stage_results,json=stageResults,proto3" json:"stage_results,omitempty"`
	GeneralResults *GeneralResults        `protobuf:"bytes,9,opt,name=general_results,json=generalResults,proto3" json:"general_results,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{3}
}

func (x *Stage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stage) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

func (x *Stage) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Stage) GetProfileType() Stage_ProfileType {
	if x != nil {
		return x.ProfileType
	}
	return Stage_PROFILE_TYPE_UNSPECIFIED
}

func (x *Stage) GetDeparture() string {
	if x != nil && x.Departure != nil {
		return *x.Departure
	}
	return ""
}

func (x *Stage) GetArrival() string {
	if x != nil && x.Arrival != nil {
		return *x.Arrival
	}
	return ""
}

func (x *Stage) GetStageType() Stage_StageType {
	if x != nil {
		return x.StageType
	}
	return Stage_STAGE_TYPE_UNSPECIFIED
}

func (x *Stage) GetStageResults() *StageResults {
	if x != nil {
		return x.StageResults
	}
	return nil
}

func (x *Stage) GetGeneralResults() *GeneralResults {
	if x != nil {
		return x.GeneralResults
	}
	return nil
}

type StageResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   []*ParticipantResultTime `protobuf:"bytes,1,rep,name=time,proto3" json:"time,omitempty"`
	Youth  []*ParticipantResultTime `protobuf:"bytes,2,rep,name=youth,proto3" json:"youth,omitempty"`
	Teams  []*ParticipantResultTime `protobuf:"bytes,3,rep,name=teams,proto3" json:"teams,omitempty"`
	Kom    []*PlacePoints           `protobuf:"bytes,4,rep,name=kom,proto3" json:"kom,omitempty"`
	Points []*PlacePoints           `protobuf:"bytes,5,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *StageResults) Reset() {
	*x = StageResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageResults) ProtoMessage() {}

func (x *StageResults) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageResults.ProtoReflect.Descriptor instead.
func (*StageResults) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{4}
}

func (x *StageResults) GetTime() []*ParticipantResultTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StageResults) GetYouth() []*ParticipantResultTime {
	if x != nil {
		return x.Youth
	}
	return nil
}

func (x *StageResults) GetTeams() []*ParticipantResultTime {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *StageResults) GetKom() []*PlacePoints {
	if x != nil {
		return x.Kom
	}
	return nil
}

func (x *StageResults) GetPoints() []*PlacePoints {
	if x != nil {
		return x.Points
	}
	return nil
}

type GeneralResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   []*ParticipantResultTime   `protobuf:"bytes,1,rep,name=time,proto3" json:"time,omitempty"`
	Youth  []*ParticipantResultTime   `protobuf:"bytes,2,rep,name=youth,proto3" json:"youth,omitempty"`
	Teams  []*ParticipantResultTime   `protobuf:"bytes,3,rep,name=teams,proto3" json:"teams,omitempty"`
	Kom    []*ParticipantResultPoints `protobuf:"bytes,4,rep,name=kom,proto3" json:"kom,omitempty"`
	Points []*ParticipantResultPoints `protobuf:"bytes,5,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *GeneralResults) Reset() {
	*x = GeneralResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResults) ProtoMessage() {}

func (x *GeneralResults) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResults.ProtoReflect.Descriptor instead.
func (*GeneralResults) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{5}
}

func (x *GeneralResults) GetTime() []*ParticipantResultTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GeneralResults) GetYouth() []*ParticipantResultTime {
	if x != nil {
		return x.Youth
	}
	return nil
}

func (x *GeneralResults) GetTeams() []*ParticipantResultTime {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *GeneralResults) GetKom() []*ParticipantResultPoints {
	if x != nil {
		return x.Kom
	}
	return nil
}

func (x *GeneralResults) GetPoints() []*ParticipantResultPoints {
	if x != nil {
		return x.Points
	}
	return nil
}

type ParticipantResultTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position      uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Time          int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ParticipantResultTime) Reset() {
	*x = ParticipantResultTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantResultTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantResultTime) ProtoMessage() {}

func (x *ParticipantResultTime) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantResultTime.ProtoReflect.Descriptor instead.
func (*ParticipantResultTime) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{6}
}

func (x *ParticipantResultTime) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ParticipantResultTime) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *ParticipantResultTime) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type ParticipantResultPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position      uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Points        uint32 `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *ParticipantResultPoints) Reset() {
	*x = ParticipantResultPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantResultPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantResultPoints) ProtoMessage() {}

func (x *ParticipantResultPoints) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantResultPoints.ProtoReflect.Descriptor instead.
func (*ParticipantResultPoints) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{7}
}

func (x *ParticipantResultPoints) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ParticipantResultPoints) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *ParticipantResultPoints) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type PlacePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Place  *Place                     `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	Points []*ParticipantResultPoints `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PlacePoints) Reset() {
	*x = PlacePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePoints) ProtoMessage() {}

func (x *PlacePoints) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePoints.ProtoReflect.Descriptor instead.
func (*PlacePoints) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{8}
}

func (x *PlacePoints) GetPlace() *Place {
	if x != nil {
		return x.Place
	}
	return nil
}

func (x *PlacePoints) GetPoints() []*ParticipantResultPoints {
	if x != nil {
		return x.Points
	}
	return nil
}

type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Distance float32 `protobuf:"fixed32,2,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_race_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_race_proto_rawDescGZIP(), []int{9}
}

func (x *Place) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Place) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

var File_race_proto protoreflect.FileDescriptor

var file_race_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x69, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63,
	0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69,
	0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63,
	0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x52, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x69,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xb6, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x58, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74,
	0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78,
	0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x55, 0x50, 0x48, 0x49, 0x4c, 0x4c, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x04,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x55, 0x50, 0x48, 0x49, 0x4c,
	0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x05, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x56,
	0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x22, 0xa9, 0x03, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63,
	0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61,
	0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x05, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e,
	0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x47, 0x0a, 0x03, 0x6b, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62,
	0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x03, 0x6b, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73,
	0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xc3, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73,
	0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x55, 0x0a, 0x05, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78,
	0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x05, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63,
	0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x53,
	0x0a, 0x03, 0x6b, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63,
	0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x03,
	0x6b, 0x6f, 0x6d, 0x12, 0x59, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6e,
	0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x74,
	0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x61, 0x74, 0x78, 0x69, 0x62, 0x6f, 0x63,
	0x6f, 0x73, 0x2e, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61,
	0x74, 0x78, 0x69, 0x62, 0x6f, 0x63, 0x6f, 0x73, 0x2f, 0x70, 0x63, 0x73, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_race_proto_rawDescOnce sync.Once
	file_race_proto_rawDescData = file_race_proto_rawDesc
)

func file_race_proto_rawDescGZIP() []byte {
	file_race_proto_rawDescOnce.Do(func() {
		file_race_proto_rawDescData = protoimpl.X.CompressGZIP(file_race_proto_rawDescData)
	})
	return file_race_proto_rawDescData
}

var file_race_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_race_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_race_proto_goTypes = []interface{}{
	(Stage_ProfileType)(0),          // 0: io.github.patxibocos.pcsscraper.protobuf.Stage.ProfileType
	(Stage_StageType)(0),            // 1: io.github.patxibocos.pcsscraper.protobuf.Stage.StageType
	(*Race)(nil),                    // 2: io.github.patxibocos.pcsscraper.protobuf.Race
	(*TeamParticipation)(nil),       // 3: io.github.patxibocos.pcsscraper.protobuf.TeamParticipation
	(*RiderParticipation)(nil),      // 4: io.github.patxibocos.pcsscraper.protobuf.RiderParticipation
	(*Stage)(nil),                   // 5: io.github.patxibocos.pcsscraper.protobuf.Stage
	(*StageResults)(nil),            // 6: io.github.patxibocos.pcsscraper.protobuf.StageResults
	(*GeneralResults)(nil),          // 7: io.github.patxibocos.pcsscraper.protobuf.GeneralResults
	(*ParticipantResultTime)(nil),   // 8: io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	(*ParticipantResultPoints)(nil), // 9: io.github.patxibocos.pcsscraper.protobuf.ParticipantResultPoints
	(*PlacePoints)(nil),             // 10: io.github.patxibocos.pcsscraper.protobuf.PlacePoints
	(*Place)(nil),                   // 11: io.github.patxibocos.pcsscraper.protobuf.Place
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
}
var file_race_proto_depIdxs = []int32{
	5,  // 0: io.github.patxibocos.pcsscraper.protobuf.Race.stages:type_name -> io.github.patxibocos.pcsscraper.protobuf.Stage
	3,  // 1: io.github.patxibocos.pcsscraper.protobuf.Race.teams:type_name -> io.github.patxibocos.pcsscraper.protobuf.TeamParticipation
	4,  // 2: io.github.patxibocos.pcsscraper.protobuf.TeamParticipation.riders:type_name -> io.github.patxibocos.pcsscraper.protobuf.RiderParticipation
	12, // 3: io.github.patxibocos.pcsscraper.protobuf.Stage.start_date_time:type_name -> google.protobuf.Timestamp
	0,  // 4: io.github.patxibocos.pcsscraper.protobuf.Stage.profile_type:type_name -> io.github.patxibocos.pcsscraper.protobuf.Stage.ProfileType
	1,  // 5: io.github.patxibocos.pcsscraper.protobuf.Stage.stage_type:type_name -> io.github.patxibocos.pcsscraper.protobuf.Stage.StageType
	6,  // 6: io.github.patxibocos.pcsscraper.protobuf.Stage.stage_results:type_name -> io.github.patxibocos.pcsscraper.protobuf.StageResults
	7,  // 7: io.github.patxibocos.pcsscraper.protobuf.Stage.general_results:type_name -> io.github.patxibocos.pcsscraper.protobuf.GeneralResults
	8,  // 8: io.github.patxibocos.pcsscraper.protobuf.StageResults.time:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	8,  // 9: io.github.patxibocos.pcsscraper.protobuf.StageResults.youth:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	8,  // 10: io.github.patxibocos.pcsscraper.protobuf.StageResults.teams:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	10, // 11: io.github.patxibocos.pcsscraper.protobuf.StageResults.kom:type_name -> io.github.patxibocos.pcsscraper.protobuf.PlacePoints
	10, // 12: io.github.patxibocos.pcsscraper.protobuf.StageResults.points:type_name -> io.github.patxibocos.pcsscraper.protobuf.PlacePoints
	8,  // 13: io.github.patxibocos.pcsscraper.protobuf.GeneralResults.time:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	8,  // 14: io.github.patxibocos.pcsscraper.protobuf.GeneralResults.youth:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	8,  // 15: io.github.patxibocos.pcsscraper.protobuf.GeneralResults.teams:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultTime
	9,  // 16: io.github.patxibocos.pcsscraper.protobuf.GeneralResults.kom:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultPoints
	9,  // 17: io.github.patxibocos.pcsscraper.protobuf.GeneralResults.points:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultPoints
	11, // 18: io.github.patxibocos.pcsscraper.protobuf.PlacePoints.place:type_name -> io.github.patxibocos.pcsscraper.protobuf.Place
	9,  // 19: io.github.patxibocos.pcsscraper.protobuf.PlacePoints.points:type_name -> io.github.patxibocos.pcsscraper.protobuf.ParticipantResultPoints
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_race_proto_init() }
func file_race_proto_init() {
	if File_race_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_race_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Race); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiderParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantResultTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantResultPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_race_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_race_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_race_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_race_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_race_proto_goTypes,
		DependencyIndexes: file_race_proto_depIdxs,
		EnumInfos:         file_race_proto_enumTypes,
		MessageInfos:      file_race_proto_msgTypes,
	}.Build()
	File_race_proto = out.File
	file_race_proto_rawDesc = nil
	file_race_proto_goTypes = nil
	file_race_proto_depIdxs = nil
}
