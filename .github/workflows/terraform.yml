name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    # Install Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'

    - name: Build alexa-skill-lambda
      run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o ../terraform/alexa-skill-lambda main.go
      working-directory: ./alexa-skill-lambda

    - name: Build appconfig-publisher-lambda
      run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o ../terraform/appconfig-publisher-lambda main.go
      working-directory: ./appconfig-publisher-lambda

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./terraform

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ./terraform

    - name: Update lambda aliases
      run: ./create_update_alias.sh
      working-directory: ./terraform
